EA Sports, developed a video game. They designed a game in such a way that, 
there are L number of levels from 1 to L. There are D number of dependencies
where each dependency[m] = [ Xm, Ym ], represents a prerequisite relationship,
that is, in order to play level-Ym, you must have completed the level-Xm.

In one day you can complete any number of levels as long as you 
have completed all the prerequisites levels in the game. 

You cannont play a level-Ym which has some prerequisite level-Xm on same day.

Write a method to return the minimum number of days to complete all the levels
in the game. If there is no way to complete all the levels, return -1.


Input Format:
-------------
Line-1: An integer L, number of levels.
Line-2: An integer D, number of dependencies.
Next D lines: Two space separated integers, Xm and Ym.

Output Format:
--------------
An integer, the minimum number of days to complete all the levels in the game.


Sample Input-1:
---------------
3
2
1 3
2 3

Sample Output-1:
----------------
2

Explanation-1:
--------------
On the first day, levels 1 and 2 are completed. 
On the second day, level-3 is completed.


Sample Input-2:
---------------
3
3
1 2
2 3
3 1

Sample Output-2:
----------------
-1

Explanation-2:
-------------
No level can be completed because they depend on each other.



#include<bits/stdc++.h>
using namespace std;
 int topoSort(int V, vector<int> adj[])
	{   vector<int> result;
       queue<int> q;
       vector<int> indegr(V, 0);
       int c=0;

       for (int i=0; i < V; i++)
           for (auto j: adj[i])
               indegr[j]++;
       bool f=0;
       for (int i=0; i < indegr.size(); i++){
           if (indegr[i] == 0) {
               f=1;
                q.push(i);
           }
       }

       while (!q.empty()){
            c++;
            int k=q.size();
            while(k--){
           int v = q.front();
           q.pop();
           result.push_back(v);
           for (auto u: adj[v]){
               indegr[u]--;
               if (indegr[u] == 0){
                   q.push(u);
                   }
           }
            }

       }
       return result.size()==V?c:-1;

	}
int main()
{
    int V,E;
    cin>>V>>E;
    vector<int> adj[V];
    while(E--){
        int u,v;
        cin>>u>>v;
        adj[u-1].push_back(v-1);
    }
    cout<<topoSort(V,adj)<<endl;
}